name: CI — Build & Tests

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }} / ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]     # ajoute macos-latest si besoin
        build_type: [Release]

    env:
      CMAKE_BUILD_PARALLEL_LEVEL: 2
      # Aide vcpkg à utiliser les binaires système présents dans le runner
      VCPKG_FORCE_SYSTEM_BINARIES: 1
      VCPKG_FEATURE_FLAGS: manifests,binarycaching

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Linux ----------
      - name: Install toolchain + Ninja (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Toolchain + Ninja + Git (pour vcpkg)
          sudo apt-get install -y build-essential gcc g++ pkg-config ninja-build git
          # Libs X11/GL/ALSA utiles quand raylib se linke (selon triplet)
          sudo apt-get install -y \
            libx11-dev libxrandr-dev libxi-dev libxinerama-dev libxcursor-dev \
            libgl1-mesa-dev libasound2-dev libpulse-dev

      - name: Show tools (Linux)
        if: runner.os == 'Linux'
        run: |
          which ninja || true
          ninja --version || true
          cmake --version
          gcc --version
          g++ --version

      # ---------- Windows ----------
      - name: Show tools (Windows)
        if: runner.os == 'Windows'
        run: |
          where ninja || ver
          cmake --version

      # ---------- Configure ----------
      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        env:
          CC: gcc
          CXX: g++
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -S . -B build -G "Ninja Multi-Config"

      # ---------- Build ----------
      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      # ---------- Tests ----------
      - name: Run tests (ctest)
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            ctest --test-dir build -C ${{ matrix.build_type }} --output-on-failure
          else
            ctest --test-dir build --output-on-failure
          fi
        shell: bash

      # ---------- Debug artifacts si échec ----------
      - name: Upload vcpkg/CMake logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}
          path: |
            build/vcpkg-manifest-install.log
            build/CMakeFiles/CMakeOutput.log
            build/CMakeFiles/CMakeError.log
          if-no-files-found: ignore
